{
  "setImmediate": {
    "prefix": "setim",
    "body": "setImmediate(() => {\n\t${0}\n})"
  },
  "require": {
    "prefix": "req",
    "body": "require('${1:module}')"
  },
  "const module = require('module')": {
    "prefix": "conreq",
    "body": "const ${1:module} = require('${1:module}')"
  },
  "let statement": {
    "prefix": "let",
    "body": "let ${1:name}"
  },
  "const statement": {
    "prefix": "con",
    "body": "const ${1:name}"
  },
  "const statement from destructuring": {
    "prefix": "cond",
    "body": "const { ${2:prop} } = ${1:value}"
  },
  "const statement from array destructuring": {
    "prefix": "cona",
    "body": "const [${2:prop}] = ${1:value}"
  },
  "class": {
    "prefix": "cla",
    "body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}"
  },
  "class extends": {
    "prefix": "clae",
    "body": "class ${1:name} extends ${2:base} {\n\tconstructor (${3:arguments}) {\n\t\tsuper(${3:arguments})\n\t\t${0}\n\t}\n}"
  },
  "import module": {
    "prefix": "imp",
    "body": "import ${2:*} from '${1:module}'"
  },
  "import module as": {
    "prefix": "impa",
    "body": "import ${2:*} as ${3:name} from '${1:module}'"
  },
  "import module destructured": {
    "prefix": "impd",
    "body": "import {$2} from '${1:module}'"
  },
  "if statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "If Statement"
  },
  "if-else statement": {
    "prefix": "ifelse",
    "body": ["if (${1:condition}) {", "\t$2", "} else {", "\t$0", "}"],
    "description": "If-Else Statement"
  },
  "else statement": {
    "prefix": "else",
    "body": "else {\n\t${0}\n}"
  },
  "else-if statement": {
    "prefix": "elseif",
    "body": "else if (${1:condition}) {\n\t${0}\n}"
  },
  "try/catch": {
    "prefix": "tryc",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
  },
  "try/finally": {
    "prefix": "tryf",
    "body": "try {\n\t${0}\n} finally {\n\t\n}"
  },
  "try/catch/finally": {
    "prefix": "trycf",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
  },
  "named function": {
    "prefix": "fn",
    "body": "function ${1:name} (${2:arguments}) {\n\t${0}\n}"
  },
  "immediately-invoked function expression": {
    "prefix": "iife",
    "body": "((${1:arguments}) => {\n\t${0}\n})(${2})"
  },
  "arrow function": {
    "prefix": "af",
    "body": "${1:arguments} => ${2:statement}"
  },
  "generator function": {
    "prefix": "gf",
    "body": "function* (${1:arguments}) {\n\t${0}\n}"
  },
  "named generator": {
    "prefix": "gfn",
    "body": "function* ${1:name}(${2:arguments}) {\n\t${0}\n}"
  },
  "console.log": {
    "prefix": "log",
    "body": "console.log(${0})"
  },
  "console.error": {
    "prefix": "err",
    "body": "console.error(${0})"
  },
  "console.warn": {
    "prefix": "war",
    "body": "console.warn(${0})"
  },
  "console.dir": {
    "prefix": "dir",
    "body": "console.dir('${1}:', ${1})"
  },
  "constructor": {
    "prefix": "cons",
    "body": "constructor () {\n\t${0}\n}"
  },
  "use strict": {
    "prefix": "uses",
    "body": "'use strict'"
  },
  "method": {
    "prefix": "method",
    "body": "${1:method} (${2:arguments}) {\n\t${0}\n}"
  },
  "getter": {
    "prefix": "get",
    "body": "get ${1:property} () {\n\t${0}\n}"
  },
  "setter": {
    "prefix": "set",
    "body": "set ${1:property} (${2:value}) {\n\t${0}\n}"
  },
  "prototype method": {
    "prefix": "proto",
    "body": "${1:Class}.prototype.${2:method} = function (${3:arguments}) {\n\t${0}\n}"
  },
  "ternary": {
    "prefix": "ter",
    "body": "${1:cond} ? ${2:true} : ${3:false}"
  },
  "return": {
    "prefix": "ret",
    "body": "return ${0}"
  },
  "for loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "for-in loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (${2:object}.hasOwnProperty(${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "for-of loop": {
    "prefix": "forof",
    "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
    "description": "For-Of Loop"
  },
  "for-await-of loop": {
    "prefix": "forawaitof",
    "body": ["for await (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
    "description": "For-Await-Of Loop"
  },
  "switch statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "while statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "While Statement"
  },
  "do-while statement": {
    "prefix": "dowhile",
    "body": ["do {", "\t$0", "} while (${1:condition});"],
    "description": "Do-While Statement"
  },
  "dom event cancel default and propagation": {
    "prefix": "evec",
    "body": "e.preventDefault()\ne.stopPropagation()\nreturn false"
  }
}
